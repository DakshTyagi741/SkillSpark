// app.js
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import FieldSelector from './FieldSelector';
import OperatorSelector from './OperatorSelector';
import ValueSelector from './ValueSelector';
import './App.css';

function App() {
  const [fields, setFields] = useState([]);
  const [selectedField, setSelectedField] = useState('');
  const [operators, setOperators] = useState([]);
  const [selectedOperator, setSelectedOperator] = useState('');
  const [values, setValues] = useState([]);
  const [selectedValue, setSelectedValue] = useState('');

  useEffect(() => {
    // Fetch fields from Elasticsearch
    const fetchFields = async () => {
      try {
        const response = await axios.get('http://localhost:9200/your-index/_mapping');
        const fieldNames = Object.keys(response.data['your-index'].mappings.properties);
        setFields(fieldNames);
      } catch (error) {
        console.error("Error fetching fields:", error);
      }
    };

    fetchFields();
  }, []);

  useEffect(() => {
    // Fetch operators based on selected field type
    if (selectedField) {
      const fetchOperators = async () => {
        try {
          const response = await axios.get('http://localhost:9200/your-index/_mapping');
          const fieldType = response.data['your-index'].mappings.properties[selectedField].type;

          let operators = [];
          if (fieldType === 'text' || fieldType === 'keyword') {
            operators = [':', '!='];
          } else if (fieldType === 'boolean') {
            operators = [':'];
          } else if (fieldType === 'integer' || fieldType === 'float') {
            operators = [':', '>', '>=', '<', '<=', '!='];
          }

          setOperators(operators);
          setSelectedOperator('');
          setValues([]);
          setSelectedValue('');
        } catch (error) {
          console.error("Error fetching operators:", error);
        }
      };

      fetchOperators();
    }
  }, [selectedField]);

  useEffect(() => {
    // Fetch values based on selected field
    if (selectedField && selectedOperator) {
      const fetchValues = async () => {
        try {
          if (selectedOperator === ':') {
            const response = await axios.post('http://localhost:9200/your-index/_search', {
              size: 0,
              aggs: {
                unique_values: {
                  terms: {
                    field: selectedField,
                    size: 100
                  }
                }
              }
            });
            const uniqueValues = response.data.aggregations.unique_values.buckets.map(bucket => bucket.key);
            setValues(uniqueValues);
          } else {
            setValues([]);
          }
        } catch (error) {
          console.error("Error fetching values:", error);
        }
      };

      fetchValues();
    }
  }, [selectedField, selectedOperator]);

  const handleFieldChange = (field) => {
    setSelectedField(field);
  };

  const handleOperatorChange = (operator) => {
    setSelectedOperator(operator);
  };

  const handleValueChange = (value) => {
    setSelectedValue(value);
  };

  const handleSearch = () => {
    console.log(`Search Query: ${selectedField}${selectedOperator}${selectedValue}`);
    // Implement search logic here
  };

  return (
    <div className="App">
      <h1>Kibana-like Search Interface</h1>
      <FieldSelector fields={fields} onChange={handleFieldChange} />
      {selectedField && <OperatorSelector operators={operators} onChange={handleOperatorChange} />}
      {selectedOperator && <ValueSelector values={values} field={selectedField} operator={selectedOperator} onChange={handleValueChange} />}
      {selectedField && selectedOperator && selectedValue && (
        <button onClick={handleSearch}>Search</button>
      )}
    </div>
  );
}

export default App;

//fieldselector.js
import React from 'react';

function FieldSelector({ fields, onChange }) {
  return (
    <select onChange={(e) => onChange(e.target.value)}>
      <option value="">Select Field</option>
      {fields.map(field => (
        <option key={field} value={field}>{field}</option>
      ))}
    </select>
  );
}

export default FieldSelector;
//operator selector.js
import React from 'react';

function OperatorSelector({ operators, onChange }) {
  return (
    <select onChange={(e) => onChange(e.target.value)}>
      <option value="">Select Operator</option>
      {operators.map(operator => (
        <option key={operator} value={operator}>{operator}</option>
      ))}
    </select>
  );
}

export default OperatorSelector;
// valueselector.js
import React from 'react';

function ValueSelector({ values, field, operator, onChange }) {
  if (operator === ':') {
    return (
      <select onChange={(e) => onChange(e.target.value)}>
        <option value="">Select Value</option>
        {values.map(value => (
          <option key={value} value={value}>{value}</option>
        ))}
      </select>
    );
  }

  return (
    <input type="text" placeholder="Enter Value" onChange={(e) => onChange(e.target.value)} />
  );
}

export default ValueSelector;

