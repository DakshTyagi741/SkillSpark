import nltk
from nltk.tokenize import word_tokenize
from nltk.tag import pos_tag

# Download the required NLTK models (if not already done)
nltk.download('punkt')
nltk.download('averaged_perceptron_tagger')

def parse_query(nl_query):
    tokens = word_tokenize(nl_query)
    tagged_tokens = pos_tag(tokens)

    es_query = {
        "query": {
            "bool": {
                "must": []
            }
        }
    }

    field = None
    value = None
    is_numeric = False

    for i, (word, tag) in enumerate(tagged_tokens):
        if tag in ['NN', 'NNS']:  # Nouns, potentially field names
            field = word.lower()
        elif tag in ['CD']:  # Cardinal numbers, potentially numeric values
            is_numeric = True
            if value is None:
                value = word
            else:
                value += " " + word
        elif tag in ['NNP', 'NNPS', 'JJ', 'RB', 'DT']:  # Proper nouns, adjectives, adverbs, determiners as values
            if value is None:
                value = word
            else:
                value += " " + word
        elif tag in ['VB', 'VBD', 'VBG', 'VBN', 'VBP', 'VBZ', 'IN']:  # Verbs, prepositions
            if field and value:
                if is_numeric:
                    es_query['query']['bool']['must'].append({
                        "term": {
                            field: int(value) if value.isdigit() else float(value)
                        }
                    })
                else:
                    es_query['query']['bool']['must'].append({
                        "match": {
                            field: value
                        }
                    })
                field = None
                value = None
                is_numeric = False

    if field and value:
        if is_numeric:
            es_query['query']['bool']['must'].append({
                "term": {
                    field: int(value) if value.isdigit() else float(value)
                }
            })
        else:
            es_query['query']['bool']['must'].append({
                "match": {
                    field: value
                }
            })

    return es_query

nl_query = "Find all documents where the title is 'Elasticsearch Basics' and the year is 2023"
es_query = parse_query(nl_query)

import json
print(json.dumps(es_query, indent=2))
